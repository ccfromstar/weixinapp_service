{
  "name": "connect-redis",
  "description": "Redis session store for Connect",
  "version": "2.1.0",
  "author": {
    "name": "TJ Holowaychuk",
    "email": "tj@vision-media.ca"
  },
  "main": "./index.js",
  "repository": {
    "type": "git",
    "url": "git@github.com:visionmedia/connect-redis.git"
  },
  "dependencies": {
    "debug": "^1.0.4",
    "express-session": "^1.7.6",
    "redis": "^0.12.1"
  },
  "devDependencies": {
    "bluebird": "^2.3.2",
    "express-session": "*"
  },
  "engines": {
    "node": "*"
  },
  "bugs": {
    "url": "https://github.com/visionmedia/connect-redis/issues"
  },
  "scripts": {
    "test": "node test.js",
    "bench": "node bench/redisbench.js"
  },
  "readme": "# Connect Redis\n\nconnect-redis is a Redis session store backed by [node_redis](http://github.com/mranney/node_redis), and is insanely fast :). Requires redis >= `2.0.0` for the _SETEX_ command.\n\n> Note: connect-redis `>= 2.0.0` only supports express `>= 4.0.0`. Use connect-redis `1.4.7` for express 3.x.\n\n## Installation\n\n\t  $ npm install connect-redis\n\n## Options\n\n  A Redis client is required.  An existing client can be passed directly using the `client` param or created for you using the `host`, `port`, or `socket` params.\n  - `client` An existing client created using `redis.createClient()`\n  - `host` Redis server hostname\n  - `port` Redis server portno\n  - `socket` Redis server unix_socket\n\nThe following additional params may be included:\n\n  - `ttl` Redis session TTL (expiration) in seconds\n  - `db` Database index to use\n  - `pass` Password for Redis authentication\n  - `prefix` Key prefix defaulting to \"sess:\"\n  - `unref` Set `true` to unref the Redis client. **Warning**: this is [an experimental feature](https://github.com/mranney/node_redis#clientunref).\n\nAny options not included in this list will be passed to the redis `createClient()` method directly.\n\n## Usage\n\nDue to express `>= 4` changes, we now need to pass `express-session` to the function `connect-redis` exports in order to extend `session.Store`:\n\n    var session = require('express-session');\n    var RedisStore = require('connect-redis')(session);\n\n    app.use(session({\n        store: new RedisStore(options),\n        secret: 'keyboard cat'\n    }));\n\n# License\n\n  MIT\n",
  "readmeFilename": "Readme.md",
  "homepage": "https://github.com/visionmedia/connect-redis",
  "_id": "connect-redis@2.1.0",
  "dist": {
    "shasum": "f7a191abedf81af021e04ca37ab6d283684e9eea"
  },
  "_from": "connect-redis@2.1.0",
  "_resolved": "https://registry.npmjs.org/connect-redis/-/connect-redis-2.1.0.tgz"
}
